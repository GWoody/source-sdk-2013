//==================== Copyright © 2014, Holodeck Project =====================
//
// Purpose: Holodeck SDK definition file (.fgd) 
//
//=============================================================================

// lightprop("models/editor/spot.mdl") <---- use this once the orientation is unfucked
@PointClass base(Targetname, Parentname, Angles) studio("models/editor/cone_helper.mdl") frustum(lightfov,nearz,farz,lightcolor,-1) = env_projectedtexture : 
	"Projected texture entity."
[
	spawnflags(flags) =
	[
		1  : "Enabled"				: 1
		2  : "Always Update (moving light)"	: 0
	]

	target(target_destination)	: "target" : : "target"	
	lightfov(float)				: "FOV" : "90.0" : "FOV"
	nearz(float)				: "NearZ" : "4.0" : "Near Z for projected texture"
	farz(float)					: "FarZ" : "750.0" : "Far Z for projected texture"	
	
	enableshadows(Choices) : "Enable Shadows" : 0 : "Enables/disables shadows from this projected texture." =
	[
		0 : "No"
		1 : "Yes"
	]
	shadowquality(Choices) : "Shadow Quality" : 1 : "Quality of shadows." =
	[
		0 : "Low"
		1 : "High"
	]
	lightonlytarget(Choices) : "Light Only Target" : 0 : "Limit flashlight effect to only effect target entity." =
	[
		0 : "No"
		1 : "Yes"
	]
	lightworld(Choices) : "Light World" : 1 : "Control whether flashlight effects static world geometry." =
	[
		0 : "No"
		1 : "Yes"
	]
	
	brightnessscale(float)		: "Brightness Scale" : "1.0" : "Scale the light color by this brightness"	

	lightcolor(color255)		: "Light Color" : "255 255 255 200" : "Light Color RGB-Intensity"
	colortransitiontime(float)	: "Color Transition Time" : "0.5" : "Amount of time it takes for a color change to occur."
	cameraspace(integer)		: "Camera Space" : 0 : "Angles are interpreted as being relative to camera."

	texturename(material) : "Texture Name" : "effects/flashlight001"

	// Inputs
	input TurnOn(void)		: "Turn on the texture"
	input TurnOff(void)		: "Turn off the texture"
	input AlwaysUpdateOn(void)	: "Turn on per frame updating (for moving lights)"
	input AlwaysUpdateOff(void)	: "Turn off per frame updating (for moving lights)"
	input SetFOV(float)		: "Set FOV"
	input SpotlightTexture(string)		: "Set the spotlight texture"
	input EnableShadows(bool)		: "Set the if shadows are enabled"
	input LightColor(color255)		: "Change the light color/brightness"
]

//-------------------------------------------------------------------------
//-------------------------------------------------------------------------
@BaseClass base(Targetname, EnableDisable, Origin) = GesturePanel
[
	//
	// Attributes.
	//
	glowtarget(target_destination) : "Glow entity" : "" : "The model based entity associated with this panel."
]

//-------------------------------------------------------------------------
//-------------------------------------------------------------------------
@SolidClass base(GesturePanel) = holo_circle_panel : "A volume in which circle gestures are detected."
[
	//
	// Attributes.
	//
	normal(angle) : "Circle Normal" : "0 0 0" : "The normal of the circle gesture required to trigger this panel."
	useTime(float) : "Use Time" : "3.0" : "The length of time the user must make the circle gesture to trigger this panel."
	
	//
	// Flags.
	//
	spawnflags(flags) =
	[
		2048: "Starts locked" : 0
		4096 : "Starts Open" : 0
		8192 : "Open Clockwise" : 0
	]
	
	//
	// Inputs.
	//
	input SetUseTime(float) : "Updates the use time attribute."
	input Lock(void) : "Lock the button, preventing it from functioning."
	input Unlock(void) : "Unlock the button, allowing it to function."
	
	//
	// Outputs.
	//
	output OnFullyOpen(void) : "Fired when the circle gesture has been performed inside the entity for the required time (after the entity was closed), and required direction."
	output OnFullyClosed(void) : "Fired when the circle gesture has been performed inside the entity for the required time (after the entity was opened), and required direction."
]

//-------------------------------------------------------------------------
//-------------------------------------------------------------------------
@SolidClass base(GesturePanel) = holo_swipe_panel : "A volume in which swipe gestures are detected."
[
	//
	// Attributes.
	//
	swipeAngle(angle) : "Swipe Angle" : "0 0 0" : "The direction of the swipe gesture required to trigger this panel."
	minSpeed(float) : "Use Time (mm/s)" : "3.0" : "The required speed of the swipe to activate trigger this panel."
	
	//
	// Inputs.
	//
	input SetMinSpeed(float) : "Updates the minimum speed attribute."
	
	//
	// Outputs.
	//
	output OnSwipe(void) : "Fired when the swipe matches the required direction."
	output OnReverseSwipe(void) : "Fired when the swipe is opposite to the required direction."
]

//-------------------------------------------------------------------------
//-------------------------------------------------------------------------
@SolidClass base(GesturePanel) = holo_button_panel : "A volume in which swipe gestures are detected."
[
	//
	// Attributes.
	//
	pressDirection(angle) : "Press Direction" : "0 0 0" : "The direction of the press gesture required to trigger this panel."
	pressSound(sound) : "Sound Name" : "" : "Name of the GameSound entry for the sound to play. Also supports direct .wav filenames."
	lockedSound(sound) : "Locked Sound Name" : "" : "Name of the GameSound entry for the sound to play (when locked). Also supports direct .wav filenames."
	volume(float) : "Sound Volume [0.0, 1.0]" : "1.0" : "Volume of the sound that is played when the button is pressed."
	
	//
	// Flags.
	//
	spawnflags(flags) =
	[
		2048: "Starts locked" : 0
	]
	
	//
	// Inputs.
	//
	input Lock(void) : "Lock the button, preventing it from functioning."
	input Unlock(void) : "Unlock the button, allowing it to function."
	
	//
	// Outputs.
	//
	output OnPress(void) : "Fired when the button has a press gesture in required direction."
	output OnPressLocked(void) : "Fired when the button has a press gesture in required direction, but the button panel has been locked."
]

//-------------------------------------------------------------------------
//-------------------------------------------------------------------------
@PointClass base(Targetname) size(16 16 16) = holo_haptic_proxy : "Interface to the haptic feedback system."
[
	//
	// Attributes.
	//
	lerpType(choices) : "Lerp Type" : 0 =
	[
		0 : "Linear"
		1 : "Exponential"
		2 : "Sin Curve"
	]
	
	time(float) : "Lerp Time" : "1"
	
	startPower(float) : "Start Power" : "0"
	startFreq(float) : "Start Frequency" : "0"
	endPower(float) : "End Power" : "1"
	endFreq(float) : "End Frequency" : "1"
	
	holdEnd(choices) : "Hold End" : 0 =
	[
		0 : "No"
		1 : "Yes"
	]
	
	//
	// Flags.
	//
	spawnflags(flags) =
	[
		1: "Left Hand" : 0
		2 : "Right Hand" : 0
	]
	
	//
	// Inputs.
	//
	input Lerp(void) : "Start the specific blend over the specified time."
	input SetLinearLerp(void) : "Sets the proxy to use a linear transition."
	input SetExpLerp(void) : "Sets the proxy to use an exponential transition."
	input SetSinLerp(void) : "Sets the proxy to use a sin curve transition."
	input SetLerpTime(float) : "Sets the proxy to lerp over the given time."
	input SetStartPower(float) : "Sets the power level to begin lerping."
	input SetEndPower(float) : "Sets the power level to finish lerping."
	input SetStartFreq(float) : "Sets the frequency to begin lerping."
	input SetEndFreq(float) : "Sets the frequency to finish lerping."
	input SwapStartEnd(void) : "Swaps the start and end power\frequency."
	input Enable(void) : "Enables the haptic patch using the start power."
	input Disable(void) : "Stops the haptic patch from running."
]